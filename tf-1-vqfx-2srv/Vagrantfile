# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

UUID = "tf1"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    config.ssh.insert_key = false

    re_name  = "vqfx-re"
    pfe_name = "vqfx-pfe"

    ##############################
    ## Packet Forwarding Engine ##
    ##############################
    config.vm.define pfe_name do |vqfxpfe|
        vqfxpfe.ssh.insert_key = false
        vqfxpfe.vm.box = 'juniper/vqfx10k-pfe'
        vqfxpfe.vm.boot_timeout = 600

        # DO NOT REMOVE / NO VMtools installed ttt
        vqfxpfe.vm.synced_folder '.',
            '/vagrant', disabled: true

        # Internal em1 port to RE
        vqfxpfe.vm.network 'private_network',
            auto_config: false,
            nic_type: '82540EM',
            virtualbox__intnet: "#{UUID}_vqfx_internal"

        # In case you have limited resources, you can limit the CPU used per vqfx-pfe VM, usually 50% is good
        #vqfxpfe.vm.provider "virtualbox" do |v|
        #   v.customize ["modifyvm", :id, "--cpuexecutioncap", "50"]
        #end
    end

    ##########################
    ## Routing Engine  #######
    ##########################
    config.vm.define re_name do |vqfx|
        vqfx.vm.hostname = "vqfx"
        vqfx.vm.box = 'juniper/vqfx10k-re'
        vqfx.vm.boot_timeout = 600

        # DO NOT REMOVE / NO VMtools installed
        vqfx.vm.synced_folder '.',
            '/vagrant', disabled: true

        # Internal em1 port to PFE
        vqfx.vm.network 'private_network',
            auto_config: false,
            nic_type: '82540EM',
            virtualbox__intnet: "#{UUID}_vqfx_internal"

        # Unused em2 port we need to exclude
        vqfx.vm.network 'private_network',
            auto_config: false,
            nic_type: '82540EM',
            virtualbox__intnet: "#{UUID}_vqfx_reserved-bridge"

        # Dataplane ports (Yes, dataplane ports are mapped on the RE and not PFE for vQFX10k)
        (1..2).each do |seg_id|
           vqfx.vm.network 'private_network',
            auto_config: false,
            nic_type: '82540EM',
            virtualbox__intnet: "#{UUID}_vqfx_seg#{seg_id}"
        end

    end




        ######################################################################################################################################
        ## Servers Connected to vQFX1 Spine for OpenStack/Contrail Controller and Contrail-Command   "vqfx lo0: 2.2.2.1"               #######
        ## Commented lines are for the lab setup with routable IP range assigned to the host and "br0" is used for direct nodes access #######
        ######################################################################################################################################
#        $subnet_s_mgmt = "10.87.65"
        $subnet_s_mgmt = "10.1.1"
        $subnet_s_ctrl_data= "10.60.17"
            (1..2).each do |s_id|
              srv_name = ( "s-srv" + s_id.to_s ).to_sym
                config.vm.define srv_name do |srv|
                    srv.vm.box = "centos/7"
                    srv.vm.hostname = "s-srv#{s_id}"
                    srv.vm.network 'private_network',
                       ip:"#{$subnet_s_mgmt}.#{s_id+9}",
                       netmask:"255.255.255.0"
#                    srv.vm.network "public_network",
#                      bridge: "br0",
#                      ip:"#{$subnet_s_mgmt}.#{s_id+86}",
#                      netmask:"255.255.255.128"
                    srv.vm.network 'private_network',
                      ip: "#{$subnet_s_ctrl_data}.#{s_id+100}",
                      nic_type: '82540EM',
                      virtualbox__intnet: "#{UUID}_vqfx1_seg#{s_id}"
                    srv.ssh.insert_key = true
                    srv.vm.provision "shell", path: "scripts/enable_root_login.sh"
#                   srv.vm.provision "shell", path: "scripts/set-centos-gw.sh"
                    srv.vm.provision "shell", path: "scripts/static-routes-s-server.sh"
                    srv.vm.provision "shell", path: "scripts/ntp.sh"
                config.vm.provider :virtualbox do |vb|
                    vb.customize ["modifyvm", :id, "--memory", "4096", "--cpus", "2"]
                end
            end
        end
end

